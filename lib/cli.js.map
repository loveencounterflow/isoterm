{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/cli.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'XTERM'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nCP                        = require 'child_process'\n#...........................................................................................................\nxterm_path                = PATH.resolve PATH.join __dirname, '../xterm'\nstart_path                = PATH.resolve PATH.join __dirname, '../app/start.js'\nH                         = require './helpers'\n# port_pattern              = /^33[0-9]{3}$/\nport_pattern              = /^33333$/\nGUY                       = require 'guy'\n\n\n#-----------------------------------------------------------------------------------------------------------\nparse_arguments = ->\n  if process.argv.length isnt 2\n    warn \"^445-1^ this command doesn't accept parameters; terminating\"\n    process.exit 1\n\n#-----------------------------------------------------------------------------------------------------------\nstart_server = -> new Promise ( resolve, reject ) =>\n  port    = null\n  signals =\n    webpack:    false\n    server:     false\n    browser:    false\n  #.........................................................................................................\n  conclude = ( signal ) =>\n    signals[ signal ] = true\n    if signals.webpack and signals.server and ( not signals.browser )\n      signals.browser = true\n      resolve { server, port, }\n  #.........................................................................................................\n  process.chdir xterm_path\n  PORT              = await H.find_free_port { port: port_pattern, }\n  env               = { process.env..., PORT, }\n  cp_cfg            = { detached: false, env, }\n  # cp_cfg            = { detached: false, }\n  server            = CP.fork start_path, cp_cfg\n  #.........................................................................................................\n  server.on 'error', ( error ) => warn '^server@445-2^', error\n  #.........................................................................................................\n  server.on 'message', ( d ) =>\n    # info '^server@445-3^', d\n    switch d?.$key ? null\n      when '^connect'\n        port = d.port\n        help \"^server@445-4^ serving on port #{rpr port}\"\n        conclude 'server'\n      when '^webpack-ready'\n        help \"^server@445-5^ webpack ready\"\n        conclude 'webpack'\n      when '^term-pid'\n        help \"^server@445-5^ received terminal PID #{d.pid}\"\n        demo_websocket d.pid\n      else\n        warn \"^server@445-6^ unknown message format: #{rpr d}\"\n    return null\n  #.........................................................................................................\n  server.on 'close',      => whisper '^server@445-7^', 'close'\n  server.on 'disconnect', => whisper '^server@445-8^', 'disconnect'\n  server.on 'error',      => whisper '^server@445-9^', 'error'\n  server.on 'exit',       => whisper '^server@445-10^', 'exit'\n  server.on 'message',    => whisper '^server@445-11^', 'message'\n  server.on 'spawn',      => whisper '^server@445-12^', 'spawn'\n  #.........................................................................................................\n  GUY.process.on_exit ->\n    info CND.reverse \" ^409-1^ process exiting \"\n    help '^409-2^', \"terminating process PID #{server.pid}\"\n    server.kill()\n    help '^409-3^', \"server exited: #{server.killed}\"\n  # help '^445-13^', 'Server started'\n  # debug '^445-14^', server.channel\n  ### TAINT get or set port ###\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nstart_browser = ( cfg ) -> new Promise ( resolve, reject ) =>\n  defaults    = { port: null, }\n  { server\n    port }    = { defaults..., cfg..., }\n  cmd         = 'chromium'\n  ### TAINT get address from `start_server()` ###\n  address     = \"http://localhost:#{port}\"\n  parameters  = [ \"--app=#{address}\", ]\n  cp_cfg      = { detached: false, }\n  browser     = CP.spawn cmd, parameters, cp_cfg\n  browser.on 'error', ( error ) => warn '^browser@445-15^', error\n  browser.on 'close',      => whisper '^browser@445-16^', 'close'\n  browser.on 'disconnect', => whisper '^browser@445-17^', 'disconnect'\n  browser.on 'error',      => whisper '^browser@445-18^', 'error'\n  browser.on 'exit',       => whisper '^browser@445-19^', 'exit'\n  browser.on 'message',    => whisper '^browser@445-20^', 'message'\n  browser.on 'spawn',      => whisper '^browser@445-21^', 'spawn'\n  #.........................................................................................................\n  GUY.process.on_exit ->\n    info CND.reverse \" ^409-4^ process exiting \"\n    help '^409-5^', \"terminating process PID #{browser.pid}\"\n    browser.kill 'SIGKILL'\n    help '^409-6^', \"browser exited: #{browser.killed}\"\n  return { browser, }\n\n#-----------------------------------------------------------------------------------------------------------\nrun = ->\n  parse_arguments()\n  { server, port, } = await start_server()\n  { browser, }      = await start_browser { server, port, }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_websocket = ( pid ) =>\n  url     = \"ws://localhost:3000/terminals/#{pid}\"\n  WS      = require 'ws'\n  ws      = new WS.WebSocket url\n  ws.on 'open', () =>\n    urge \"^445-23^ websocket open\"\n    # ws.send 'echo \"helo from server\"'\n  # ws.on 'message', ( data ) =>\n  #   if cfg.echo\n  #     process.stdout.write data # .toString()\n  return null\n\n\n############################################################################################################\ndo =>\n  # GUY.process.on_exit ->\n  #   info CND.reverse \" ^409-7^ process exiting \"\n  await run()\n\n\n"
  ]
}