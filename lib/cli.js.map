{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/cli.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ISOTERM/CLI'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nCP                        = require 'child_process'\n#...........................................................................................................\nxterm_path                = PATH.resolve PATH.join __dirname, '../xterm'\nH                         = require './helpers'\nport_pattern              = /^33[0-9]{3}$/\n# port_pattern              = /^8081$/\nGUY                       = require 'guy'\n# _start_server             = require '../app/server.js'\n_start_server             = require './server2.js'\n#...........................................................................................................\nDATOM                     = require 'datom'\n# { new_datom\n#   new_xemitter\n#   select }                = DATOM.export()\nXE                        = DATOM.new_xemitter()\nMIXA                      = require 'mixa'\nisoterm_cfg               = MIXA.configurator.read_cfg()\n\n\n#-----------------------------------------------------------------------------------------------------------\nget_screen_dimensions = ->\n  [ width, height, ] = ( require '@vamidicreations/screenres' ).get()\n  return { width, height, }\n\n#-----------------------------------------------------------------------------------------------------------\nstart_server = -> new Promise ( resolve, reject ) =>\n  host                      = isoterm_cfg.server?.host          ? '127.0.0.1'\n  port_pattern              = isoterm_cfg.server?.port_pattern  ? '^333[0-9]$'\n  port_pattern              = new RegExp port_pattern\n  port                      = await H.find_free_port { port: port_pattern, fallback: null, }\n  process.env.isoterm_host  = host\n  process.env.isoterm_port  = port\n  process.chdir xterm_path\n  ### TAINT use callback or events to communicate data such as `term.pid` from `server.js` ###\n  await _start_server XE\n  XE.listen_to '^server/terminal/pid', ( { pid } ) -> demo_websocket host, port, pid\n  #.........................................................................................................\n  return resolve { server: process, host, port, }\n\n#-----------------------------------------------------------------------------------------------------------\nstart_browser = ( cfg ) -> new Promise ( resolve, reject ) =>\n  defaults    = { server: null, host: null, port: null, }\n  { server\n    host\n    port }    = { defaults..., cfg..., }\n  cmd         = 'chromium'\n  ### TAINT get address from `start_server()` ###\n  ### TAINT validate address not malformed ###\n  address     = \"http://#{host}:#{port}\"\n  screen      = get_screen_dimensions()\n  parameters  = [ \"--window-position=0,0\", \"--window-size=#{screen.width},#{screen.height}\", \"--app=#{address}\", ]\n  # parameters  = [ \"--window-position=0,0\", \"--window-size=#{screen.width},#{screen.height}\", \"#{address}\", \"--auto-open-devtools-for-tabs\", ]\n  # parameters  = [ \"--app=#{address}\", ]\n  cp_cfg      = { detached: false, }\n  help '^cli/browser@4^', \"spawning #{cmd} #{parameters.join ' '}\"\n  browser     = CP.spawn cmd, parameters, cp_cfg\n  browser.on 'error', ( error ) => warn '^cli/browser@5^', error\n  browser.on 'close',       => whisper '^cli/browser@6^', 'close'\n  browser.on 'disconnect',  => whisper '^cli/browser@7^', 'disconnect'\n  browser.on 'error',       => whisper '^cli/browser@8^', 'error'\n  browser.on 'message',     => whisper '^cli/browser@9^', 'message'\n  browser.on 'spawn',       => whisper '^cli/browser@10^', 'spawn'\n  # browser.on 'spawn',       =>\n  #   whisper '^cli/browser@11^', 'spawn'\n  #   demo_websocket host, port, browser.pid\n  #   return null\n  #.........................................................................................................\n  browser.on 'exit', =>\n    info CND.reverse \" ^cli/browser@12^ browser exiting; terminating server process PID #{process.pid} \"\n    process.exit 0\n  #.........................................................................................................\n  GUY.process.on_exit ->\n    info CND.reverse \" ^cli/browser@13^ process exiting; terminating browser process PID #{browser.pid} \"\n    browser.kill()\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nstart_server_and_browser = ->\n  { server, host, port, } = await start_server()\n  { browser, }            = await start_browser { server, host, port, }\n  return { server, host, port, browser, }\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT consider to utilize XE messages from `server.js` instead of opening own WS instance ###\ndemo_websocket = ( host, port, pid ) =>\n  url     = \"ws://#{host}:#{port}/terminals/#{pid}\"\n  WS      = require 'ws'\n  ws      = new WS.WebSocket url\n  urge \"^cli/demo_websocket@14^ opening websocket at #{url}\"\n  urge \"^cli/demo_websocket@15^ browser.pid #{pid}\"\n  urge \"^cli/demo_websocket@16^ process.pid #{process.pid}\"\n  ws.on 'open', () =>\n    urge \"^cli/demo_websocket@17^ websocket open at #{url}\"\n    ws.send 'echo \"helo from server\"'\n  ws.on 'message', ( data ) =>\n    # if cfg.echo\n    # process.stdout.write data # .toString()\n    XE.emit '^cli/browser/terminal/data', { data, }\n    return null\n  return null\n\n\n#===========================================================================================================\n# XE event handlers\n#-----------------------------------------------------------------------------------------------------------\n# XE.listen_to_all      ( key, d  ) -> debug '^cli/xemitter@2^', d\nXE.listen_to_unheard  ( key, d  ) -> whisper '^cli/xemitter@3^', d\n\n#-----------------------------------------------------------------------------------------------------------\nXE.listen_to '^cli/browser/terminal/data', ( { data, } ) ->\n  # whisper '^cli@18^', \"received #{data.length} bytes\"\n  # process.stdout.write data\n\n#-----------------------------------------------------------------------------------------------------------\nXE.listen_to '^server/ws/data', ( { data, } ) ->\n  # whisper '^cli@18a^', \"received #{data.length} bytes\"\n  # process.stdout.write data\n\n\n\n#===========================================================================================================\n# CLI\n#-----------------------------------------------------------------------------------------------------------\ncli = -> new Promise ( done ) =>\n  #.........................................................................................................\n  jobdefs =\n    default_command: 'start'\n    commands:\n      #-----------------------------------------------------------------------------------------------------\n      'start':\n        description:  \"start browser with terminal\"\n        runner: ( d ) =>\n          await start_server_and_browser()\n          done()\n      # #-----------------------------------------------------------------------------------------------------\n      # 'copy-data':\n      #   description:  \"copy data into DB; specify individual DSKs or 'all'\"\n      #   flags:\n      #     'input':\n      #       alias:        'i'\n      #       type:         String\n      #       positional:   true\n      #       multiple:     'greedy'\n      #       description:  \"input file(s)\"\n      #   runner: ( d ) =>\n      #     unless ( dsks = d.verdict.parameters.input )?\n      #       warn \"need at least one DSK; use 'all' to copy data from all files\"\n      #     debug '^33344^', { dsks, }\n      #     await copy_data dsks\n      #     done()\n  #.........................................................................................................\n  MIXA.run jobdefs, process.argv\n  return null\n\n\n############################################################################################################\ndo =>\n  # GUY.process.on_exit ->\n  #   info CND.reverse \" ^409-7^ process exiting \"\n  await cli()\n\n\n"
  ]
}