{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/helpers.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ISOTERM/HELPERS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n# GUY                       = require 'guy'\n# { lets\n#   freeze\n#   thaw }                  = GUY.lft\n{ check: post_is_used, }                        = require 'port-used'\nRandex                    = require 'randexp'\nmisfit                    = Symbol 'misfit'\n\n\n#===========================================================================================================\ntypes.declare 'find_free_port_cfg', tests:\n  \"@isa.object x\":                    ( x ) -> @isa.object x\n  \"( @isa.regex x.port )\":            ( x ) -> ( @isa.regex x.port )\n  \"( @isa.cardinal x.tries )\":        ( x ) -> ( @isa.cardinal x.tries )\n  \"( @isa.boolean x.verbose )\":       ( x ) -> ( @isa.boolean x.verbose )\n  # \"( @isa.any x.fallback )\":          ( x ) -> ( @isa.any x.fallback )\n\n#-----------------------------------------------------------------------------------------------------------\ndefaults =\n  find_free_port_cfg:\n    # port:             /^[1-9]111$/\n    # port:             /^5[0-9]{2}11$/\n    port:             /^([1-9][0-9]{3}|[1-5][0-9]{3}|6[0-5][0-9]{2})$/\n    tries:            100\n    fallback:         misfit\n    verbose:          false\n\n#-----------------------------------------------------------------------------------------------------------\n@find_free_port = ( cfg ) =>\n  ### Find free port for the connection between the server and the web terminal. Can give `pattern`, will\n  generate strings to match. Results must be digits-only and be a valid port number between 1024 and 65535\n  (inclusively). ###\n  cfg     = { defaults.find_free_port_cfg..., cfg..., }\n  validate.find_free_port_cfg cfg\n  count   = 0\n  randex  = new Randex cfg.port\n  for _ in [ 1 .. cfg.tries ] by +1\n    port = randex.gen()\n    unless /^[0-9]+$/.test port\n      throw new Error \"^isoterm/find_free_port@1^ the supplied pattern resulted in an illegal port number: #{rpr port}\"\n    port = parseInt port, 10\n    unless 1024 <= port <= 65535\n      whisper \"^isoterm/find_free_port@2^ port number not in range: #{rpr port}\" if cfg.verbose\n      continue\n    count++\n    whisper \"^isoterm/find_free_port@2^ checking whether port #{rpr port} is free\" if cfg.verbose\n    # debug '^332^', post_is_used port\n    return port if not await post_is_used port\n  return cfg.fallback unless cfg.fallback is misfit\n  throw new Error \"^isoterm/find_free_port@3^ unable to find port with #{rpr cfg}, tried #{count} times\"\n\n\n############################################################################################################\nif module is require.main then do =>\n  # await run()\n  urge '^345^', await @find_free_port { verbose: true, fallback: null, }\n\n\n\n\n\n\n\n"
  ]
}