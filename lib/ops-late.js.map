{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/ops-late.coffee"
  ],
  "names": [],
  "mappings": "AAIA;EAAA;AAAA,MAAA,SAAA,EAAA,cAAA,EAAA,WAAA,EAAA,SAAA,EAAA,cAAA,EAAA,cAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAuEA,OAAO,CAAC,GAAR,CAAY,cAAZ,EAA4B,IAA5B;;EACA,GAAA,CAAI,yBAAJ;;EACA,OAAO,CAAC,GAAR,CAAY,cAAZ,EAA4B,IAA5B;;EAEA,SAAA,GAAY;IACV,KADU;;IAGV,KAHU;IAIV,MAJU;IAKV,SALU;;;EAOZ,cAAA,GAAiB,CACf,KADe,EAEf,UAFe,EAGf,SAHe,EAIf,MAJe,EAKf,OALe,EAMf,UANe;;EAQjB,SAAA,GAAY,CACV,UADU,EAEV,MAFU,EAGV,OAHU,EAIV,QAJU;;EAOZ,cAAA,GAAiB,QAAA,CAAE,KAAF,CAAA;AACjB,QAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,QAAA,EAAA;IAAE,CAAA,GAAY,CAAA;IACZ,KAAA,2CAAA;;MAAA,CAAC,CAAE,CAAF,CAAD,GAAY,KAAK,CAAE,CAAF;IAAjB;IACA,GAAA,GAAY;IACZ,QAAA,GAAY,SAAS,CAAE,KAAK,CAAC,QAAR;IACrB,IAAG,QAAA,KAAc,UAAjB;MACE,CAAC,CAAC,QAAF,GAAa;MACb,GAAG,CAAC,IAAJ,CAAS,QAAT,EAFF;;IAGA,KAAA,kDAAA;;MACE,KAAgB,KAAK,CAAC,gBAAN,CAAuB,CAAvB,CAAhB;AAAA,iBAAA;;MACA,GAAG,CAAC,IAAJ,CAAS,CAAT;MACA,CAAC,CAAE,CAAF,CAAD,GAAS;IAHX;IAIA,GAAG,CAAC,IAAJ,CAAS,CAAC,CAAC,GAAX;IACA,CAAC,CAAC,GAAF,GAAU,GAAG,CAAC,IAAJ,CAAS,GAAT;IACV,CAAC,CAAC,KAAF,GAAU;AACV,WAAO;EAfQ;;EAiBjB,cAAA,GAAiB,QAAA,CAAE,CAAF,CAAA;AACf,YAAO,CAAC,CAAC,GAAT;AAAA,WACO,WADP;QAEI,GAAA,CAAI,cAAJ,EAAoB,mCAApB;QACA,CAAC,CAAC,KAAK,CAAC,eAAR,CAAA;QACA,CAAC,CAAC,KAAK,CAAC,cAAR,CAAA;AACA,eAAO;AALX,WAMO,WANP;QAOI,GAAA,CAAI,cAAJ,EAAoB,UAApB;QACA,CAAC,CAAC,KAAK,CAAC,eAAR,CAAA;QACA,CAAC,CAAC,KAAK,CAAC,cAAR,CAAA;AACA,eAAO;AAVX;AAWA,WAAO;EAZQ;;EAcjB,WAAA,GAAc,QAAA,CAAE,KAAF,CAAA;IACZ,GAAA,CAAI,cAAJ,EAAoB,KAApB;IACA,GAAA,CAAI,cAAJ,EAAoB,cAAA,CAAe,KAAf,CAApB;AACA,WAAO,cAAA,CAAe,cAAA,CAAe,KAAf,CAAf;EAHK;;EAMd,CAAC,CAAC,GAAG,CAAC,EAAN,CAAS,QAAQ,CAAC,eAAlB,EAAmC,SAAnC,EAA8C,QAAA,CAAE,KAAF,CAAA;WAAa,WAAA,CAAY,KAAZ;EAAb,CAA9C;;EACA,IAAI,CAAC,KAAL,CAA8C,QAAA,CAAE,KAAF,CAAA;WAAa,WAAA,CAAY,KAAK,CAAC,QAAlB;EAAb,CAA9C,EAvIA;;;;;EA2IA,GAAA,CAAI,cAAJ,EAAoB,OAAA,CAAQ,KAAR,CAApB;;EACA,GAAA,CAAI,cAAJ,EAAoB,OAAA,CAAQ,OAAR,CAApB;;EA5IA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA",
  "sourcesContent": [
    "\n\n\n\n'use strict'\n\n\n# _console = console\n\n\n# #===========================================================================================================\n# class Intercepted_console\n\n#   # #---------------------------------------------------------------------------------------------------------\n#   # constructor: ( target ) ->\n#   #   @target = target\n#   #   return undefined\n\n#   #---------------------------------------------------------------------------------------------------------\n#   get: ( target, key ) ->\n#     _console.log '^334-1^', key\n#     return target[ key ]\n#     # return Reflect.get arguments...\n\n#   #---------------------------------------------------------------------------------------------------------\n#   log: ( P... ) ->\n#     _console.log '^334-2^', P\n#     return _console.log P...\n\n#   # debug:            ƒ debug()\n#   # error:            ƒ error()\n#   # info:             ƒ info()\n#   # warn:             ƒ warn()\n\n#   #---------------------------------------------------------------------------------------------------------\n#   # assert:           ƒ assert()\n#   # clear:            ƒ clear()\n#   # context:          ƒ context()\n#   # count:            ƒ count()\n#   # countReset:       ƒ countReset()\n#   # dir:              ƒ dir()\n#   # dirxml:           ƒ dirxml()\n#   # group:            ƒ group()\n#   # groupCollapsed:   ƒ groupCollapsed()\n#   # groupEnd:         ƒ groupEnd()\n#   # memory:           MemoryInfo {totalJSHeapSize: 19300000, usedJSHeapSize: 19300000, jsHeapSizeLimit: 2190000000}\n#   # profile:          ƒ profile()\n#   # profileEnd:       ƒ profileEnd()\n#   # table:            ƒ table()\n#   # time:             ƒ time()\n#   # timeEnd:          ƒ timeEnd()\n#   # timeLog:          ƒ timeLog()\n#   # timeStamp:        ƒ timeStamp()\n#   # trace:            ƒ trace()\n\n# globalThis.console  = new Proxy console, new Intercepted_console()\n# globalThis.log      = console.log\n# globalThis.µ        = require 'mudom'\n# # globalThis.ISOTERM   = {};\n# Combokeys           = require 'combokeys'\n# count               = 0\n# # ckeys               = new Combokeys document.documentElement\n# ckeys               = new Combokeys µ.DOM.select_id 'terminal-container'\n# ckeys.bind 'ctrl+y', ( event, key ) -> log '^ops-late@1^', event\n# ckeys.bind 'ctrl+k', ( event, key ) ->\n#   log '^ops-late@2^', \"show or hide side bar\"\n#   event.preventDefault()\n#   event.stopPropagation()\n#   return false\n# ckeys.bind 'ctrl+l', ( event, key ) ->\n#   log '^ops-late@3^', \"activate address bar\"\n#   event.preventDefault()\n#   event.stopPropagation()\n#   return false\n\nconsole.log '^ops-late@4^', 'OK'\nlog \"^ops-late@5^ OPS loaded\"\nconsole.log '^ops-late@5^', term\n\ncopy_keys = [\n  'xxx'\n  # 'type'\n  'key'\n  'code'\n  'keyCode' ]\n\nmodifier_names = [\n  'Alt'\n  'AltGraph'\n  'Control'\n  'Meta'\n  'Shift'\n  'CapsLock' ]\n\nlocations = [\n  'standard'\n  'left'\n  'right'\n  'numpad' ]\n\n\nxxx_from_event = ( event ) ->\n  d         = {}\n  d[ k ]    = event[ k ] for k in copy_keys\n  xxx       = []\n  location  = locations[ event.location ]\n  if location isnt 'standard'\n    d.location = location\n    xxx.push location\n  for k in modifier_names\n    continue unless event.getModifierState k\n    xxx.push k\n    d[ k ] = true\n  xxx.push d.key\n  d.xxx   = xxx.join '+'\n  d.event = event\n  return d\n\nhandle_hotkeys = ( d ) ->\n  switch d.xxx\n    when 'Control+l'\n      log '^ops-late@6^', \"prevent activation of address bar\"\n      d.event.stopPropagation()\n      d.event.preventDefault()\n      return false\n    when 'Control+q'\n      log '^ops-late@6^', \"quit app\"\n      d.event.stopPropagation()\n      d.event.preventDefault()\n      return false\n  return null\n\nhandle_keys = ( event ) ->\n  log '^ops-late@7^', event\n  log '^ops-late@7^', xxx_from_event event\n  return handle_hotkeys xxx_from_event event\n\n\nµ.DOM.on document.documentElement, 'keydown', ( event ) -> handle_keys event\nterm.onKey                                    ( event ) -> handle_keys event.domEvent\n# term.paste 'helo'\n\n# log '^ops-late@7^', require 'cnd'\nlog '^ops-late@7^', require 'guy'\nlog '^ops-late@7^', require 'datom'\n\n\n###\npublic addMarker(cursorYOffset: number): IMarker | undefined {\npublic attachCustomKeyEventHandler(customKeyEventHandler: CustomKeyEventHandler): void {\npublic bell(): void {\npublic bindMouse(): void {\npublic blur(): void {\npublic browser: IBrowser = Browser as any;\npublic cancel(ev: Event, force?: boolean): boolean | undefined {\npublic clear(): void {\npublic clearSelection(): void {\npublic clearTextureAtlas(): void {\npublic deregisterCharacterJoiner(joinerId: number): void {\npublic deregisterLinkMatcher(matcherId: number): void {\npublic dispose(): void {\npublic element: HTMLElement | undefined;\npublic focus(): void {\npublic get buffer(): IBuffer {\npublic get markers(): IMarker[] {\npublic get onA11yChar(): IEvent<string> { return this._onA11yCharEmitter.event; }\npublic get onA11yTab(): IEvent<number> { return this._onA11yTabEmitter.event; }\npublic get onBell(): IEvent<void> { return this._onBell.event; }\npublic get onBlur(): IEvent<void> { return this._onBlur.event; }\npublic get onCursorMove(): IEvent<void> { return this._onCursorMove.event; }\npublic get onFocus(): IEvent<void> { return this._onFocus.event; }\npublic get onKey(): IEvent<{ key: string, domEvent: KeyboardEvent }> { return this._onKey.event; }\npublic get onRender(): IEvent<{ start: number, end: number }> { return this._onRender.event; }\npublic get onSelectionChange(): IEvent<void> { return this._onSelectionChange.event; }\npublic get onTitleChange(): IEvent<string> { return this._onTitleChange.event; }\npublic getSelection(): string {\npublic getSelectionPosition(): ISelectionPosition | undefined {\npublic hasSelection(): boolean {\npublic linkifier2: ILinkifier2;\npublic linkifier: ILinkifier;\npublic open(parent: HTMLElement): void {\npublic paste(data: string): void {\npublic refresh(start: number, end: number): void {\npublic registerCharacterJoiner(handler: CharacterJoinerHandler): number {\npublic registerDecoration(decorationOptions: IDecorationOptions): IDecoration | undefined {\npublic registerLinkMatcher(regex: RegExp, handler: LinkMatcherHandler, options?: ILinkMatcherOptions): number {\npublic registerLinkProvider(linkProvider: ILinkProvider): IDisposable {\npublic reset(): void {\npublic resize(x: number, y: number): void {\npublic screenElement: HTMLElement | undefined;\npublic scrollLines(disp: number, suppressScrollEvent?: boolean, source = ScrollSource.TERMINAL): void {\npublic select(column: number, row: number, length: number): void {\npublic selectAll(): void {\npublic selectLines(start: number, end: number): void {\npublic textarea: HTMLTextAreaElement | undefined;\npublic updateCursorStyle(ev: KeyboardEvent): void {\npublic viewport: IViewport | undefined;\n###\n\n"
  ]
}