{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/ops.coffee"
  ],
  "names": [],
  "mappings": "AAIA;EAAA;AAAA,MAAA,SAAA,EAAA,mBAAA,EAAA,QAAA,EAAA,KAAA,EAAA;;EAGA,QAAA,GAAW,QAHX;;;EAOM,sBAAN,MAAA,oBAAA,CAAA;;;;;;;IAQE,GAAK,CAAE,MAAF,EAAU,GAAV,CAAA;MACH,QAAQ,CAAC,GAAT,CAAa,SAAb,EAAwB,GAAxB;AACA,aAAO,MAAM,CAAE,GAAF;IAFV,CANP;;;;;IAYE,GAAK,CAAA,GAAE,CAAF,CAAA;MACH,QAAQ,CAAC,GAAT,CAAa,SAAb,EAAwB,CAAxB;AACA,aAAO,QAAQ,CAAC,GAAT,CAAa,GAAA,CAAb;IAFJ;;EAdP,EAPA;;;;;;;;;;;;;;;;;;;;;;;;;;;EAmDA,UAAU,CAAC,OAAX,GAAsB,IAAI,KAAJ,CAAU,OAAV,EAAmB,IAAI,mBAAJ,CAAA,CAAnB;;EACtB,UAAU,CAAC,GAAX,GAAsB,OAAO,CAAC;;EAC9B,UAAU,CAAC,CAAX,GAAsB,OAAA,CAAQ,OAAR;;EACtB,SAAA,GAAsB,OAAA,CAAQ,WAAR;;EACtB,OAAO,CAAC,GAAR,CAAY,QAAZ,EAAsB,IAAtB;;EACA,GAAA,CAAI,oBAAJ,EAxDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6FA,KAAA,GAAQ,EA7FR;;;;;EAiGA,KAAA,GAAU,IAAI,SAAJ,CAAc,QAAQ,CAAC,eAAvB,EAjGV;;;;;;;;EAwGA,KAAK,CAAC,IAAN,CAAW,QAAX,EAAqB,QAAA,CAAE,KAAF,EAAS,GAAT,CAAA;WAAkB,GAAA,CAAI,WAAJ,EAAiB,KAAjB;EAAlB,CAArB;;EACA,KAAK,CAAC,IAAN,CAAW,QAAX,EAAqB,QAAA,CAAE,KAAF,EAAS,GAAT,CAAA;IACnB,GAAA,CAAI,WAAJ,EAAiB,uBAAjB;IACA,KAAK,CAAC,cAAN,CAAA;IACA,KAAK,CAAC,eAAN,CAAA;AACA,WAAO;EAJY,CAArB;;EAKA,KAAK,CAAC,IAAN,CAAW,QAAX,EAAqB,QAAA,CAAE,KAAF,EAAS,GAAT,CAAA;IACnB,GAAA,CAAI,WAAJ,EAAiB,sBAAjB;IACA,KAAK,CAAC,cAAN,CAAA;IACA,KAAK,CAAC,eAAN,CAAA;AACA,WAAO;EAJY,CAArB;;AAKA,SAAO;AAnHP",
  "sourcesContent": [
    "\n\n\n\n'use strict'\n\n\n_console = console\n\n\n#===========================================================================================================\nclass Intercepted_console\n\n  # #---------------------------------------------------------------------------------------------------------\n  # constructor: ( target ) ->\n  #   @target = target\n  #   return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  get: ( target, key ) ->\n    _console.log '^334-1^', key\n    return target[ key ]\n    # return Reflect.get arguments...\n\n  #---------------------------------------------------------------------------------------------------------\n  log: ( P... ) ->\n    _console.log '^334-2^', P\n    return _console.log P...\n\n  # debug:            ƒ debug()\n  # error:            ƒ error()\n  # info:             ƒ info()\n  # warn:             ƒ warn()\n\n  #---------------------------------------------------------------------------------------------------------\n  # assert:           ƒ assert()\n  # clear:            ƒ clear()\n  # context:          ƒ context()\n  # count:            ƒ count()\n  # countReset:       ƒ countReset()\n  # dir:              ƒ dir()\n  # dirxml:           ƒ dirxml()\n  # group:            ƒ group()\n  # groupCollapsed:   ƒ groupCollapsed()\n  # groupEnd:         ƒ groupEnd()\n  # memory:           MemoryInfo {totalJSHeapSize: 19300000, usedJSHeapSize: 19300000, jsHeapSizeLimit: 2190000000}\n  # profile:          ƒ profile()\n  # profileEnd:       ƒ profileEnd()\n  # table:            ƒ table()\n  # time:             ƒ time()\n  # timeEnd:          ƒ timeEnd()\n  # timeLog:          ƒ timeLog()\n  # timeStamp:        ƒ timeStamp()\n  # trace:            ƒ trace()\n\nglobalThis.console  = new Proxy console, new Intercepted_console()\nglobalThis.log      = console.log\nglobalThis.µ        = require 'mudom'\nCombokeys           = require 'combokeys'\nconsole.log '^3938^', 'OK'\nlog \"^ops@1^ OPS loaded\"\n\n# modifier_names  = [  'Alt', 'AltGraph', 'Control', 'Meta', 'Shift', 'CapsLock', ]\n# kms             = {} ### key modifier state ###\n# count           = 0\n# handler         = ( d ) ->\n#   count++\n#   e = {}\n#   if ( mods = µ.KB.get_changed_kb_modifier_state() )?\n#     kms = {}\n#     for k, v of mods\n#       continue if k is '_type'\n#       continue if v is false\n#       kms[ k ]  = v\n#   e.keyname = d.keyname\n#   e.state   = d.state if d.state\n#   e[ k ]    = v for k, v of kms\n#   log \"^ops@3^\", count, e\n#   return null\n\n#   # for k in modifier_names\n#   #   delete kms[ k ] if kms[ k ] is false\n#   # if mods?\n#   # d   = { d..., }\n#   # delete d.event\n#   # delete d.state if d.state is false\n#   # log \"^ops@3^\", count, { d..., kms..., }\n#   # delete d._type\n#   # delete d._type\n#   # log \"^ops@3^\", count, { d..., kms..., }\n# µ.KB._listen_to_key 'y', 'push', handler\n# µ.KB._listen_to_key 'Y', 'push', handler\n# µ.KB._listen_to_key '»', 'push', handler\n# µ.KB._listen_to_key '›', 'push', handler\n# # µ.KB._listen_to_modifiers         ( d ) -> log \"^ops@3^\", d\n\n# µ.DOM.ready ->\ncount = 0\n# µ.DOM.on document, 'keydown', ( event ) =>\n#   count++\n#   log \"^ops@5^\", count, event\nckeys   = new Combokeys document.documentElement\n# target  = µ.DOM.select_first 'body'\n# target  = µ.DOM.select_all '*'\n# ckeys   = new Combokeys target\n# log '^ops@45^', target\n# bind    = ( keys, handler ) ->\n#   ckeys.bind keys, handler, 'keydown'\nckeys.bind 'ctrl+y', ( event, key ) -> log '^ops@756^', event\nckeys.bind 'ctrl+k', ( event, key ) ->\n  log '^ops@756^', \"show or hide side bar\"\n  event.preventDefault()\n  event.stopPropagation()\n  return false\nckeys.bind 'ctrl+l', ( event, key ) ->\n  log '^ops@756^', \"activate address bar\"\n  event.preventDefault()\n  event.stopPropagation()\n  return false\nreturn null\n\n\n"
  ]
}