{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/server2.coffee"
  ],
  "names": [],
  "mappings": "AAIA;EAAA;AAAA,MAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,OAAA,EAAA,SAAA,EAAA,cAAA,EAAA,WAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,KAAA,EAAA,GAAA,EAAA,QAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,UAAA;;;EAKA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAd5B;;;EAgBA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,UAAA,GAA4B,IAAI,CAAC,OAAL,CAAa,IAAI,CAAC,IAAL,CAAU,SAAV,EAAqB,UAArB,CAAb;;EAC5B,cAAA,GAA4B,OAAO,CAAC,OAAR,CAAgB,YAAhB,EAA8B;IAAE,KAAA,EAAO,CAAE,UAAF;EAAT,CAA9B;;EAC5B,QAAA,GAA4B,OAAO,CAAC,OAAR,CAAgB,UAAhB,EAA8B;IAAE,KAAA,EAAO,CAAE,UAAF;EAAT,CAA9B;;EAC5B,OAAA,GAA4B,OAAA,CAAQ,SAAR;;EAC5B,SAAA,GAA4B,OAAA,CAAQ,cAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR;;EAC5B,GAAA,GAA4B,OAAA,CAAQ,QAAR;;EAC5B,GAAA,GAA4B,OAAO,CAAC,IA1BpC;;;EA4BA,WAAA,GAA4B,QAAA,CAAA,GAAE,CAAF,CAAA;WAAY,IAAI,CAAC,OAAL,CAAa,IAAI,CAAC,IAAL,CAAU,GAAA,CAAV,CAAb;EAAZ;;EAC5B,KAAA,GAA4B,CAAA;;EAC5B,KAAK,CAAC,IAAN,GAA4B,WAAA,CAAY,SAAZ,EAA0B,IAA1B;;EAC5B,KAAK,CAAC,GAAN,GAA4B,WAAA,CAAY,KAAK,CAAC,IAAlB,EAA0B,KAA1B;;EAC5B,KAAK,CAAC,MAAN,GAA4B,WAAA,CAAY,KAAK,CAAC,GAAlB,EAA0B,QAA1B;;EAC5B,KAAK,CAAC,UAAN,GAA4B,WAAA,CAAY,KAAK,CAAC,GAAlB,EAA0B,YAA1B;;EAI5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AArCA",
  "sourcesContent": [
    "\n\n\n\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'XXTERM/SERVER'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nCND                       = require 'cnd'\nGUY                       = require 'guy'\nPATH                      = require 'path'\nxterm_path                = PATH.resolve PATH.join __dirname, '../xterm'\nexpressWs_path            = require.resolve 'express-ws', { paths: [ xterm_path, ], }\npty_path                  = require.resolve 'node-pty',   { paths: [ xterm_path, ], }\nexpress                   = require 'express'\nexpressWs                 = require expressWs_path\nos                        = require 'os'\npty                       = require pty_path\nlog                       = console.log\n#...........................................................................................................\nget_abspath               = ( P... ) -> PATH.resolve PATH.join P...\npaths                     = {}\npaths.home                = get_abspath __dirname,    '..'\npaths.app                 = get_abspath paths.home,   'app'\npaths.static              = get_abspath paths.app,    'static'\npaths.index_html          = get_abspath paths.app,    'index.html'\n\n\n\n```\n\n// Whether to use binary transport.\nconst USE_BINARY = os.platform() !== \"win32\";\n\n\n/* ### NOTE: `XE` is a `datom/xemitter`` instance */\nfunction startServer( XE ) {\n  return new Promise( ( resolve, reject ) => {\n  var app = express();\n  expressWs(app);\n\n  var terminals = {},\n      logs = {};\n\n  app.use('/xterm.css', express.static( get_abspath( paths.app, '/xterm.css' ) ) );\n  app.get('/logo.png', (req, res) => { // lgtm [js/missing-rate-limiting]\n    res.sendFile( get_abspath( paths.app, '/logo.png' ) );\n  });\n\n  app.get('/', (req, res) => { // lgtm [js/missing-rate-limiting]\n    res.sendFile( paths.index_html );\n  });\n\n  app.get('/test', (req, res) => { // lgtm [js/missing-rate-limiting]\n    res.sendFile( get_abspath( paths.app, '/test.html' ) );\n  });\n\n  app.get('/style.css', (req, res) => { // lgtm [js/missing-rate-limiting]\n    res.sendFile( get_abspath( paths.app, '/style.css' ) );\n  });\n\n  app.use( '/static',  express.static( get_abspath( paths.app, '/static' ) ) );\n  app.use( '/fonts',   express.static( get_abspath( paths.app, '/fonts'  ) ) );\n  app.use( '/dist',    express.static( get_abspath( paths.app, '/dist'   ) ) );\n  app.use( '/src',     express.static( get_abspath( paths.app, '/src'    ) ) );\n\n  app.post('/terminals', (req, res) => {\n    const env = Object.assign({}, process.env);\n    env['COLORTERM'] = 'truecolor';\n    var cols = parseInt(req.query.cols),\n      rows = parseInt(req.query.rows),\n      term = pty.spawn(process.platform === 'win32' ? 'cmd.exe' : 'zsh', [], {\n      // term = pty.spawn(process.platform === 'win32' ? 'cmd.exe' : 'bash', [], {\n        name: 'xterm-256color',\n        cols: cols || 80,\n        rows: rows || 24,\n        cwd: process.platform === 'win32' ? undefined : env.PWD,\n        env: env,\n        encoding: USE_BINARY ? null : 'utf8'\n      });\n\n    log('^server.js@734-1^ URL: ' + req.protocol + '://' + req.host + req.originalUrl);\n    log('^server.js@734-1^ Created terminal with PID: ' + term.pid);\n    XE.emit( '^server/terminal/pid', { pid: term.pid, } );\n    terminals[term.pid] = term;\n    logs[term.pid] = '';\n    term.on('data', function(data) {\n      logs[term.pid] += data;\n    });\n    res.send(term.pid.toString());\n    res.end();\n  });\n\n  app.post('/terminals/:pid/size', (req, res) => {\n    log('^server.js@734-1^ URL: ' + req.protocol + '://' + req.host + req.originalUrl);\n    var pid = parseInt(req.params.pid),\n        cols = parseInt(req.query.cols),\n        rows = parseInt(req.query.rows),\n        term = terminals[pid];\n\n    term.resize(cols, rows);\n    log('Resized terminal ' + pid + ' to ' + cols + ' cols and ' + rows + ' rows.');\n    res.end();\n  });\n\n  app.ws('/terminals/:pid', function (ws, req) {\n    var term = terminals[parseInt(req.params.pid)];\n    log('Connected to terminal ' + term.pid);\n    ws.send(logs[term.pid]);\n\n    // string message buffering\n    function buffer(socket, timeout) {\n      let s = '';\n      let sender = null;\n      return (data) => {\n        s += data;\n        if (!sender) {\n          sender = setTimeout(() => {\n            socket.send(s);\n            s = '';\n            sender = null;\n          }, timeout);\n        }\n      };\n    }\n    // binary message buffering\n    function bufferUtf8(socket, timeout) {\n      let buffer = [];\n      let sender = null;\n      let length = 0;\n      return (data) => {\n        buffer.push(data);\n        length += data.length;\n        if (!sender) {\n          sender = setTimeout(() => {\n            socket.send(Buffer.concat(buffer, length));\n            buffer = [];\n            sender = null;\n            length = 0;\n          }, timeout);\n        }\n      };\n    }\n    const send = USE_BINARY ? bufferUtf8(ws, 5) : buffer(ws, 5);\n\n    term.on('data', function(data) {\n      XE.emit( '^server/ws/data', { data, } );\n      try {\n        send(data);\n      } catch (ex) {\n        // The WebSocket is not open, ignore\n      }\n    });\n    ws.on('message', function(msg) {\n      XE.emit( '^server/ws/message', { message: msg, } );\n      term.write(msg);\n    });\n    ws.on('close', function () {\n      XE.emit( '^server/ws/close', null );\n      term.kill();\n      log('Closed terminal ' + term.pid);\n      // Clean things up\n      delete terminals[term.pid];\n      delete logs[term.pid];\n    });\n  });\n  // ### TAINT must validate host, port\n  // const host = os.platform() === 'win32' ? '127.0.0.1' : '0.0.0.0';\n  const host = process.env.xxterm_host || '127.0.0.1';\n  const port = process.env.xxterm_port || 3000;\n  log( CND.blue( '^server.js@734-1^', { host, port, } ) );\n\n  app.on( 'error',            ( error ) => { log( CND.blue( '^server.js@734-8^', error ) ); } );\n  process.stderr.on( 'data',  ( data  ) => { log( CND.blue( '^server.js@734-9^', data  ) ); } );\n\n  //--------------------------------------------------------------------------------------------------------\n  console.log('^server.js@734-2^ express app going to listen to http://' + host + ':' + port);\n  const server = app.listen( { host, port, }, () => {\n    console.log('^server.js@734-3^ express app listening to http://' + host + ':' + port);\n    process.send?.( { $key: '^connect', port, } )\n    resolve(); } );\n\n  //--------------------------------------------------------------------------------------------------------\n  server.on('error',function( error ) {\n    // log( CND.red( CND.reverse( '^server.js@734-15^', error.code ) ) );\n    log( CND.red( CND.reverse( '^server.js@734-16^', error.message ) ) );\n    process.exit( 111 );\n    throw error; } );\n    } ); // Promise\n\n}\n\n\nmodule.exports = startServer;\n```\n"
  ]
}